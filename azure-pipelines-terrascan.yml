# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
    curl --location https://github.com/accurics/terrascan/releases/download/v1.18.3/terrascan_1.18.3_Linux_x86_64.tar.gz --output terrascan.tar.gz
    tar -xvf terrascan.tar.gz
    sudo install terrascan /usr/local/bin    
  displayName: 'Get tools'

- script: |
    terrascan scan -t azure -i terraform --output junit-xml > terrascan-results.xml
    ls -la .
    pwd
  workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/storage-account
  displayName: 'Run terrascan'  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/terrascan-results.xmlinfrastructure/storage-account'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: PublishTestResults@2
  displayName: "Terrascan Results"
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/terrascan-results.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
    failTaskOnFailedTests: true
    testRunTitle: 'Terrascan'
    publishRunAttachments: true